<?php

/**
 * Implements hook_form_alter().
 */
function udla_blocks_alter_form_alter(&$form, &$form_state, $form_id)
{
  if (($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form')) {
    $block = block_load($form['module']['#value'], $form['delta']['#value']);
    $form['settings']['background_color'] = array(
      '#type' => 'textfield',
      '#title' => t('Background Color'),
      '#size' => 7,
      '#maxlength' => 7,
      '#default_value' => isset($block->background_color) ? $block->background_color : '',
      '#attributes' => array('class' => array('colorfield-colorpicker')),
      '#attached' => array(
        'library' => array(array('system', 'farbtastic')),
        'js' => array(drupal_get_path('module', 'colorfield') . '/js/colorfield-farbtastic.js'),
      ),
      '#suffix' => '<div class="colorfield-picker"></div>',
    );
    $form['settings']['text_color'] = array(
      '#type' => 'textfield',
      '#title' => t('Text Color'),
      '#size' => 7,
      '#maxlength' => 7,
      '#default_value' => isset($block->text_color) ? $block->text_color : '',
      '#attributes' => array('class' => array('colorfield-colorpicker')),
      '#attached' => array(
        'library' => array(array('system', 'farbtastic')),
        'js' => array(drupal_get_path('module', 'colorfield') . '/js/colorfield-farbtastic.js'),
      ),
      '#suffix' => '<div class="colorfield-picker"></div>',
    );
    $form['settings']['hover_link'] = array(
      '#type' => 'textfield',
      '#title' => t('Hover Link'),
      '#size' => 7,
      '#maxlength' => 7,
      '#default_value' => isset($block->hover_link) ? $block->hover_link : '',
      '#attributes' => array('class' => array('colorfield-colorpicker')),
      '#attached' => array(
        'library' => array(array('system', 'farbtastic')),
        'js' => array(drupal_get_path('module', 'colorfield') . '/js/colorfield-farbtastic.js'),
      ),
      '#suffix' => '<div class="colorfield-picker"></div>',
    );
    $form['settings']['hover_content'] = array(
      '#type' => 'textfield',
      '#title' => t('Hover Content'),
      '#size' => 7,
      '#maxlength' => 7,
      '#default_value' => isset($block->hover_content) ? $block->hover_content : '',
      '#attributes' => array('class' => array('colorfield-colorpicker')),
      '#attached' => array(
        'library' => array(array('system', 'farbtastic')),
        'js' => array(drupal_get_path('module', 'colorfield') . '/js/colorfield-farbtastic.js'),
      ),
      '#suffix' => '<div class="colorfield-picker"></div>',
    );
    $form['settings']['hover_content_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Hover Content Text'),
      '#size' => 7,
      '#maxlength' => 7,
      '#default_value' => isset($block->hover_content_text) ? $block->hover_content_text : '',
      '#attributes' => array('class' => array('colorfield-colorpicker')),
      '#attached' => array(
        'library' => array(array('system', 'farbtastic')),
        'js' => array(drupal_get_path('module', 'colorfield') . '/js/colorfield-farbtastic.js'),
      ),
      '#suffix' => '<div class="colorfield-picker"></div>',
    );
    $form['settings']['background_image'] = array(
      '#title' => t('Background image'),
      '#type' => 'media',
      '#tree' => TRUE,
      '#input' => TRUE,
      '#description' => t('If no image is uploaded, this image will be shown on display.'),
      '#media_options' => array(
          'global' => array('types' => array('image' => 'image'), 'schemes' => array('public' => 'public', ), 'enabledPlugins' => array('upload' => 'upload', ), ),
        ),
      '#default_value' => isset($block->background_image) ? $block->background_image : '',
    );
    if($form['module']['#value'] == 'tb_megamenu'){
      $form['settings']['background_color_change'] = array(
        '#type' => 'textfield',
        '#title' => t('Background Color Change'),
        '#size' => 7,
        '#maxlength' => 7,
        '#default_value' => isset($block->background_color_change) ? $block->background_color_change : '',
        '#attributes' => array('class' => array('colorfield-colorpicker')),
        '#attached' => array(
          'library' => array(array('system', 'farbtastic')),
          'js' => array(drupal_get_path('module', 'colorfield') . '/js/colorfield-farbtastic.js'),
        ),
        '#suffix' => '<div class="colorfield-picker"></div>',
      );

    }
    $form['#submit'][] = 'udla_blocks_alter_form_submit';
  }
  // background color decanatura taxonomy
  if ($form_id == 'taxonomy_form_term') {
    $form['#submit'][] = 'udla_blocks_alter_form_submit';

  }
}


/**
 * Implementation of hook_bean_form_submit().
 */
function udla_blocks_alter_form_submit($form, $form_state)
{

  if ($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') {

    // Only save if value has changed.
    global $base_url;
    if (isset($form_state['values']['background_image']) && $form['settings']['background_image']['#default_value'] != $form_state['values']['background_image'] && user_access('administer blocks')) {
       
      _update_block_data_image($form_state, 'background_image');
    }

    if (isset($form_state['values']['background_color']) && $form['settings']['background_color']['#default_value'] != $form_state['values']['background_color'] && user_access('administer blocks')) {
      _update_block_data_css($form_state, 'background_color');
    }
    if (isset($form_state['values']['text_color']) && $form['settings']['text_color']['#default_value'] != $form_state['values']['text_color'] && user_access('administer blocks')) {
      _update_block_data_css($form_state, 'text_color');
    }
    if (isset($form_state['values']['background_color_change']) && $form['settings']['background_color_change']['#default_value'] != $form_state['values']['background_color_change'] && user_access('administer blocks')) {
      _update_block_data_css($form_state, 'background_color_change');
    }
    if (isset($form_state['values']['hover_link']) && $form['settings']['hover_link']['#default_value'] != $form_state['values']['hover_link'] && user_access('administer blocks')) {
      _update_block_data_css($form_state, 'hover_link');
    }
    if (isset($form_state['values']['hover_content']) && $form['settings']['hover_content']['#default_value'] != $form_state['values']['hover_content'] && user_access('administer blocks')) {
      _update_block_data_css($form_state, 'hover_content');
    }
    if (isset($form_state['values']['hover_content_text']) && $form['settings']['hover_content_text']['#default_value'] != $form_state['values']['hover_content_text'] && user_access('administer blocks')) {
      _update_block_data_css($form_state, 'hover_content_text');
    }
    //
    // Flush all context module cache to use the updated background_color.
    if (module_exists('context')) {
      cache_clear_all('context', 'cache', true);
    }
    drupal_clear_css_cache();
    sleep(3);
  }

  // background color decanatura taxonomy

  if ($form_state['values']['form_id'] == 'taxonomy_form_term' && $form['#term']['vocabulary_machine_name'] =='decanatura_categorias') { 
    if (isset($form_state['values']['field_color_linea']['und'][false]['rgb']) && user_access('administer blocks')) {
      _update_taxonomy_data_css($form_state, 'field_color_linea');
    }
    if (isset($form_state['values']['field_background_hover']['und'][false]['rgb']) && user_access('administer blocks')) {
        _update_taxonomy_data_css($form_state, 'field_background_hover');
    }
    if (isset($form_state['values']['field_text_color']['und'][false]['rgb']) && user_access('administer blocks')) {
       _update_taxonomy_data_css($form_state, 'field_text_color');
    }
    if (isset($form_state['values']['field_text_color_hover']['und'][false]['rgb']) && user_access('administer blocks')) {
       _update_taxonomy_data_css($form_state, 'field_text_color_hover');
    }
    //
    // Flush all context module cache to use the updated background_color.
    if (module_exists('context')) {
      cache_clear_all('context', 'cache', true);
    }
    drupal_clear_css_cache();
    sleep(3);
  }

}

function _color_set_for_data($value)
{
  global  $base_url;
  $realpath = realpath(dirname(__FILE__)) . '/css/styles_background.css';
  if (file_exists($realpath)) {
    chmod($realpath, 0777);
    $fh = fopen($realpath, 'a+');
    fwrite($fh, '.background-' . drupal_clean_css_identifier($value, array()) . ' { background-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.text-' . drupal_clean_css_identifier($value, array()) . ' {color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.text-' . drupal_clean_css_identifier($value, array()) . ' a{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content a{border-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content a:hover{background: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content{border-top-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content .content-date{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer a{border-color: '.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer a:hover{background-color: ' . $value . ' !important; border-color: '.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer::before{border-top-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .widget_pager_bottom a{border-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .widget_pager_bottom .active a{background-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover{background: ' . $value . ' !important; border-top-color:'.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-' . drupal_clean_css_identifier($value, array()) . ' .box-content .text-content-'.drupal_clean_css_identifier($value, array()).'{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover a{color: ' . $value . ' !important; border-color:'.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover .content-date{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer a:hover{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.opacity-content-' . drupal_clean_css_identifier($value, array()) . '::before {background: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.opacity-content-' . drupal_clean_css_identifier($value, array()) . ' a::before{background: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.border-top-' . drupal_clean_css_identifier($value, array()) . ' {border-top: 4px solid ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.pager-' . drupal_clean_css_identifier($value, array()) . ' a {border: 1px solid ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh,'/* '.'end'.' */'. PHP_EOL);
 
  } else {
    $fh = fopen($realpath, 'w+');
    chmod($realpath, 0777);
    fwrite($fh, '.background-' . drupal_clean_css_identifier($value, array()) . ' { background-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.text-' . drupal_clean_css_identifier($value, array()) . ' {color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.text-' . drupal_clean_css_identifier($value, array()) . ' a{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content a{border-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content a:hover{background: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content{border-top-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .box-content .content-date{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer a{border-color: '.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer a:hover{background-color: ' . $value . ' !important; border-color: '.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer::before{border-top-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .widget_pager_bottom a{border-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-link-' . drupal_clean_css_identifier($value, array()) . ' .widget_pager_bottom .active a{background-color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover{background: ' . $value . ' !important; border-top-color:'.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-' . drupal_clean_css_identifier($value, array()) . ' .box-content .text-content-'.drupal_clean_css_identifier($value, array()).'{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover a{color: ' . $value . ' !important; border-color:'.$value.' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .box-content:hover .content-date{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.hover-content-text-' . drupal_clean_css_identifier($value, array()) . ' .view-more-footer a:hover{color: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.opacity-content-' . drupal_clean_css_identifier($value, array()) . '::before {background: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.opacity-content-' . drupal_clean_css_identifier($value, array()) . ' a::before{background: ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.border-top-' . drupal_clean_css_identifier($value, array()) . ' {border-top: 4px solid ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh, '.pager-' . drupal_clean_css_identifier($value, array()) . ' a {border: 1px solid ' . $value . ' !important;}' . PHP_EOL);
    fwrite($fh,'/* '.'end'.' */'. PHP_EOL);

  }
  fclose($fh);
  chmod($realpath, 0766);

  $colorid = db_insert('backgrounds_color') // Table name no longer needs {}
    ->fields(array(
      'color' => $value,
    ))
    ->execute();
    //sleep(3);
}
/**
 * Implements hook_init().
 */
function udla_blocks_alter_init()
{
  drupal_add_css(drupal_get_path('module', 'udla_blocks_alter') . '/css/styles_background.css', array('group' => CSS_SYSTEM, 'every_page' => true));
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function udla_blocks_alter_preprocess_block(&$vars){
  $block = $vars['block'];

  if (!empty($block->background_color)) {
    if ( isset($block->background_color_change) && !empty($block->background_color_change)) {
      $result = _block_data_css($block->background_color, 'background');
      $result_b = _block_data_css($block->background_color_change, 'background');
      drupal_add_js(array('udla_blocks_alter' => array('background_color' => reset($result))), array('type' => 'setting'));
      drupal_add_js(array('udla_blocks_alter' => array('background_color_change' => reset($result_b))), array('type' => 'setting'));

    }else{
      $result = _block_data_css($block->background_color, 'background');

      if (!empty($result)) {
        $vars['classes_array'][] = implode(' ', $result);

      }
    }

  }
  else if ( isset($block->background_color_change) && !empty($block->background_color_change)) {
    $result_b = _block_data_css($block->background_color_change, 'background');
    drupal_add_js(array('udla_blocks_alter' => array('background_color_change' => reset($result_b))), array('type' => 'setting'));
  }
  if (!empty($block->text_color)) {
    $result = _block_data_css($block->text_color, 'text');
    if (!empty($result)) {
      $vars['classes_array'][] = implode(' ', $result);
    }
  }

}


function udla_blocks_alter_panels_pane_content_alter($content, $pane, $args, $contexts)
{
  if ($pane->type == 'block') {

    $block = block_load($content->module, $content->delta);

 if (!empty($block->background_image)){
    $fid = file_load($block->background_image);
    if (isset($fid)&&($fid !== '0')) {
      $file_uri = file_create_url(file_build_uri($block->background_image->uri));
      $fid = $file_uri.$fid->filename;
      $wrapper = $block->module.'-'.$block->delta;
     $wrapper = str_replace("_", "-", $wrapper);
    //array($block->bid )
      drupal_add_js(array(
        'udla_blocks_alter' => array(
          'data_ids' => array(
            $block->bid => array(
              'info_block' => $wrapper,
              'url_img' => $fid
            )
          )
        )
      ), 'setting');
      drupal_add_js(drupal_get_path('module', 'udla_blocks_alter') . '/js/udla_blocks_alter.js');
    }
  }


    if (!empty($block->background_color)) {
      $result = _block_data_css($block->background_color, 'background');
      if (!empty($result)) {

        $pane->css['css_class'] = (isset($pane->css['css_class'])) ? $pane->css['css_class'] . " " . implode(' ', $result) : implode(' ', $result);
      }
    }
    if (!empty($block->text_color)) {
      $result = _block_data_css($block->text_color, 'text');
      if (!empty($result)) {
        $pane->css['css_class'] = (isset($pane->css['css_class'])) ? $pane->css['css_class'] . " " . implode(' ', $result) : implode(' ', $result);
      }
    }
    if (!empty($block->hover_link)) {
      $result = _block_data_css($block->hover_link, 'hover-link');
      if (!empty($result)) {
        $pane->css['css_class'] = (isset($pane->css['css_class'])) ? $pane->css['css_class'] . " " . implode(' ', $result) : implode(' ', $result);
      }
    }
    if (!empty($block->hover_content)) {
      $result = _block_data_css($block->hover_content, 'hover-content');
      if (!empty($result)) {
        $pane->css['css_class'] = (isset($pane->css['css_class'])) ? $pane->css['css_class'] . " " . implode(' ', $result) : implode(' ', $result);
      }
    }
    if (!empty($block->hover_content)) {
      $result = _block_data_css($block->hover_content_text, 'hover-content-text');
      if (!empty($result)) {
        $pane->css['css_class'] = (isset($pane->css['css_class'])) ? $pane->css['css_class'] . " " . implode(' ', $result) : implode(' ', $result);
      }
    }
  }

}


// background color decanatura taxonomy
function _update_taxonomy_data_css($form_state, $name_field)
{
  $result = db_select('backgrounds_color', 'bc')
  ->fields('bc', array('color'))
  ->condition('color', $form_state['values'][$name_field]['und'][false]['rgb'], '=')
  ->execute()
  ->fetchAssoc();
  if (empty($result)) {
    _color_set_for_data($form_state['values'][$name_field]['und'][false]['rgb']);
  }

}
function _update_block_data_css($form_state, $name_field)
{
  $result = db_select('backgrounds_color', 'bc')
  ->fields('bc', array('color'))
  ->condition('color', $form_state['values'][$name_field], '=')
  ->execute()
  ->fetchAssoc();
  if (empty($result)) {
    _color_set_for_data($form_state['values'][$name_field]);
  }

  db_update('block')
    ->fields(array($name_field => $form_state['values'][$name_field]))
    ->condition('module', $form_state['values']['module'])
    ->condition('delta', $form_state['values']['delta'])
    ->execute();


}
function _update_block_data_image($form_state, $name_field){  

  db_update('block')
    ->fields(array($name_field => $form_state['values'][$name_field]))
    ->condition('module', $form_state['values']['module'])
    ->condition('delta', $form_state['values']['delta'])
    ->execute();
  drupal_set_message(t('Assigned image like background.'));
}

function _block_data_css($value_field, $name_field)
{
  $return = array();
  $classes_array = explode(' ', $value_field);
  foreach ($classes_array as $class) {
    $result = db_select('backgrounds_color', 'bc')
      ->fields('bc', array('color'))
      ->condition('color', $value_field, '=')
      ->execute()
      ->fetchAssoc();
    if (isset($result['color'])) {
      $return[] = $name_field . "-" . drupal_clean_css_identifier($result['color'], array());
    }
  }
  return $return;
}

function _change_imagen_class($block){
      if ( isset($block)) {
        $name=file_load($block->background_image);
        $file_uri = file_create_url(file_build_uri($block->background_image->uri));          
        drupal_add_js(array('udla_blocks_alter' => array('name_img' => $name)), 'setting');
        drupal_add_js(array('udla_blocks_alter' => array('url_img' => $file_uri)), 'setting');
        drupal_add_js(array('udla_blocks_alter' => array('datos' => $block)), 'setting');
        drupal_add_js(drupal_get_path('module', 'udla_blocks_alter') . '/js/udla_blocks_alter.js');
      }
}





