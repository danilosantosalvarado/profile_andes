<?php

include_once 'api/andes.taxonomy.inc';
include_once 'api/andes.content.inc';
include_once 'api/andes.beans.inc';


 /**
 * Implements hook_form_FORM_ID_alter().
 */
function andes_form_install_configure_form_alter(&$form, $form_state) {

  $form['server_settings']['site_default_country']['#default_value'] = 'CO';
  drupal_add_js('jQuery(document).ready(function () { jQuery("#edit-date-default-timezone").val("America/Bogota"); });', 'inline');
}


/**
 * Implements hook_form_alter().
 */
function andes_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'install_configure_form') {
      $form['#submit'][] = 'andes_install_configure_form_submit';
  }
}

 /**
 * Implements hook_form_FORM_ID_alter().
 */
function andes_install_configure_form_submit(&$form, $form_state) {

  global $user;

  variable_set('site_name', $form_state['values']['site_name']);
  variable_set('site_mail', $form_state['values']['site_mail']);
  variable_set('date_default_timezone', $form_state['values']['date_default_timezone']);
  variable_set('site_default_country', $form_state['values']['site_default_country']);
  variable_set('site_default_user_name', $form_state['input']['account']['name']);
  variable_set('site_default_user_mail', $form_state['input']['account']['mail']);
  variable_set('site_default_user_pass', $form_state['input']['account']['pass']['pass1']);

  // Enable update.module if this option was selected.
  if ($form_state['values']['update_status_module'][1]) {
    module_enable(array('update'), FALSE);

    // Add the site maintenance account's email address to the list of
    // addresses to be notified when updates are available, if selected.
    if ($form_state['values']['update_status_module'][2]) {
      variable_set('update_notify_emails', array($form_state['values']['account']['mail']));
    }
  }

  // We precreated user 1 with placeholder values. Let's save the real values.
  $account = user_load(1);
  $merge_data = array('init' => $form_state['values']['account']['mail'], 'roles' => !empty($account->roles) ? $account->roles : array(), 'status' => 1, 'timezone' => $form_state['values']['date_default_timezone']);
  user_save($account, array_merge($form_state['values']['account'], $merge_data));
  // Load global $user and perform final login tasks.
  $user = user_load(1);
  user_login_finalize();

  if (isset($form_state['values']['clean_url'])) {
    variable_set('clean_url', $form_state['values']['clean_url']);
  }

  // Record when this install ran.
  variable_set('install_time', $_SERVER['REQUEST_TIME']);
}




/**
 * Implements hook_install().
 */
function andes_install() {
 // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);
  // Enable Theme Default.
  variable_set('theme_default','andes');
  // Set permisions to gmap_markers.js

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some andes blocks.
  $default_theme = variable_get('theme_default', 'andes');
  $admin_theme = 'adminimal';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'language',
      'delta' => 'lang_dropdown',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'navigation',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');


  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
  );
  taxonomy_vocabulary_save($vocabulary); 

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field); 

 $help = st('Enter a comma-separated list of words to describe your content.');
  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance); 


  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );

  menu_link_save($item);
  // Update the menu router information.
  menu_rebuild();

    // Create Menu (Mega-Menu)
  $menu_mega = array(
    'menu_name' => 'menu-mega-menu',
    'title' => 'Mega Menu',
    'description' => 'Main menu (Mega-Menu)');

  menu_save($menu_mega);

  // Create Menu (Top-Soy-Menu)
  $menu_top_soy = array(
    'menu_name' => 'menu-top-soy',
    'title' => 'Mega top soy',
    'description' => 'Top soy (Mega-top-soy)');

  menu_save($menu_top_soy);

  // Create Menu (Enlaces de interes)
  $menu_enlace = array(
    'menu_name' => 'enlaces-de-interes',
    'title' => 'Enlaces de interes',
    'description' => 'Menu enlaces de interes');

  menu_save($menu_enlace);


  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'adminimal')
    ->execute();

  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->condition('name', 'bartik')
    ->execute();

  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'bootstrap')
    ->execute();

  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'andes')
    ->execute();

   variable_set('admin_theme', 'adminimal');
   variable_set('node_admin_theme', '1');

   // Enabled  Task Pages Manager
   variable_set('page_manager_node_view_disabled', FALSE);

   // Import Menu ("menu-mega-menu").
    module_load_include('inc', 'menu_import', 'includes/import');

    $options = array();


    module_enable(array('menus_imports_fe'), TRUE);

    // Set Enabled Preflix languages en
    db_update('languages')
      ->fields(array(
        'name' => 'English',
        'native' => 'English',
        'domain' => '',
        'prefix' => 'en',
        'direction' => '0',
      ))
      ->condition('language',  'en')
      ->execute();

    // Multilanguage
    // Set setting language_negotiation_set // Es - Multilanguage
    require_once DRUPAL_ROOT . '/includes/language.inc';
    require_once DRUPAL_ROOT . '/includes/locale.inc';

    $negotiation = array (
      'language-default' =>
      array (
        'callbacks' =>
        array (
          'language' => 'language_from_default',
        ),
        'weight' => '10',
        'name' => 'Predeterminado',
        'description' => 'Usar el idioma predeterminado del sitio (Español).',
      ),
      'locale-url' =>
      array (
        'types' =>
        array (
          0 => 'language_content',
          1 => 'language',
          2 => 'language_url',
        ),
        'callbacks' =>
        array (
          'language' => 'locale_language_from_url',
          'switcher' => 'locale_language_switcher_url',
          'url_rewrite' => 'locale_language_url_rewrite_url',
        ),
        'file' => 'includes/locale.inc',
        'weight' => '-8',
        'name' => 'URL',
        'description' => 'Determinar el idioma a partir de la URL (prefijo de ruta o dominio).',
        'config' => 'admin/config/regional/language/configure/url',
      ),
    );
   language_negotiation_set('language', $negotiation);

    $providers_weight = array (
      0 =>
      array (
        'locale-url' => '-8',
        'locale-session' => '-6',
        'locale-user' => '-4',
        'locale-browser' => '-2',
        'language-default' => '10',
      ),
    );

  variable_set("locale_language_providers_weight_language", $providers_weight);
  //  Set bundle "noticias" -> Entity Node
  variable_set('language_content_type_' . 'noticias', 4);
  variable_set('language_content_type_' . 'eventos', 4);
  variable_set('language_content_type_' . 'equipo_de_trabajo', 4);
}

function andes_profile_details() {
  $details['language'] = "es";
  return $details;
}


/*
 *This function is used for added task used after to Site Config
*/
function andes_install_tasks($install_state) {

  $flag = TRUE;
  $tasks = array();

  $tasks['permission'] = array(
    'display_name' => st('Validando permisos'),
    'display' => TRUE,
    'type' => 'form',
    'run' => $flag ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'function' => 'permission_form',
  ); 

  $tasks['import_data_files'] = array(
    'display_name' => st('Generando contenido'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => $flag ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'function' => '_import_data_files',
  ); 

  $tasks['install_beans'] = array(
    'display_name' => st('Guardando configuraciones'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => $flag ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'function' => '_install_data',
  ); 

  $tasks['install_finished']['function'] = 'andes_install_finished';

  return $tasks;
}

function permission_form($form, &$form_state){
    $permisos = substr(sprintf('%o', fileperms('sites/default')), -4);

    if ($permisos != '0777') {
      $markup = '<li class="active">'.t('Please check permission 777 into ["sites/default"]').'</li>';
    }else{
      $markup = '<li class="done">'.t('Please check permission 777 into ["sites/default"]').'</li>';
    }

    $form['default'] = array(
      '#type' => 'markup', 
      '#markup' => $markup,
      '#tree' => true,
      '#prefix' => '<ol class="task-list">',
      '#suffix' => '</ol>',
    );

    $permisos = substr(sprintf('%o', fileperms('profiles/andes/modules/custom/udla_blocks_alter/css')), -4);

    if ($permisos != '0775') {
      $markup = '<li class="active">'.t('Please check permission 775 into ["profiles/andes/modules/custom/udla_blocks_alter/css"]').'</li>';
    }else{
      $markup = '<li class="done">'.t('Please check permission 775 into ["profiles/andes/modules/custom/udla_blocks_alter/css"]').'</li>';
    }
    
     $form['estilo'] = array(
      '#type' => 'markup',
      '#markup' => $markup,
      '#tree' => true,
      '#prefix' => '<ol class="task-list">',
      '#suffix' => '</ol>',
    );
    $permisos = substr(sprintf('%o', fileperms('profiles/andes/modules/custom/udla_blocks_alter/css/styles_background.css')), -4);

    if ($permisos != '0775') {
      $markup = '<li class="active">'.t('Please check permission 775 into ["profiles/andes/modules/custom/udla_blocks_alter/css/styles_background.css"]').'</li>';
    }else{
      $markup = '<li class="done">'.t('Please check permission 775 into ["profiles/andes/modules/custom/udla_blocks_alter/css/styles_background.css"]').'</li>';
    }

    $form['css'] = array(
      '#type' => 'markup', 
      '#markup' => $markup,
      '#tree' => true,
      '#prefix' => '<ol class="task-list">',
      '#suffix' => '</ol>',
    );
   

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
  );

  return $form;
}




function permission_form_validate($form, &$form_state){

    $permisos = substr(sprintf('%o', fileperms('sites/default')), -4);

    if ($permisos != '0777') {
      form_set_error('default', t('The folder ["sites/default"] has permissions '.$permisos.', must have 777 permissions to continue the installation.'));
    }

   

    $permisos = substr(sprintf('%o', fileperms('profiles/andes/modules/custom/udla_blocks_alter/css')), -4);

    if ($permisos != '0775') {
      form_set_error('css', t('The folder ["profiles/andes/modules/custom/udla_blocks_alter/css"] has permissions '.$permisos.', must have 775 permissions to continue the installation.'));
    }

    $permisos = substr(sprintf('%o', fileperms('profiles/andes/modules/custom/udla_blocks_alter/css/styles_background.css')), -4);

    if ($permisos != '0775') {
      form_set_error('estilo', t('The file ["profiles/andes/modules/custom/udla_blocks_alter/css/styles_background.css"] has permissions '.$permisos.', must have 775 permissions to continue the installation.'));
    }
   return $form;
}


function _import_data_files() {
  $batch = array(
    'title' => t('Generando contenido'),
  );

  rrmdir('sites/default/files');

  $zip = new ZipArchive;
  $res = $zip->open('profiles/andes/storage/files.zip');
  if ($res === TRUE) {
     $zip->extractTo('sites/default/');
     for ($i=0; $i <=$zip->numFiles; $i++) {
          $batch['operations'][] = array('_install__files', array($i));
     }  
     $zip->close();
  }
  return $batch;
}


function _install__files($contador){
  return $contador;  
} 



 function rrmdir($dir) {
   if (is_dir($dir)) { 
     $objects = scandir($dir); 
     foreach ($objects as $object) { 
       if ($object != "." && $object != "..") { 
         if (is_dir($dir."/".$object))
           rrmdir($dir."/".$object);
         else
           unlink($dir."/".$object); 
       } 
     }
     rmdir($dir); 
   } 
 }


function _install_data() {
  
 variable_set('file_private_path', 'sites/default/files/private');
 backup_migrate_include('crud', 'locations');
   

 $data = array(
      'build_info' => array(
        'args' => array(
          0 => 'manual',
          1 => 'configurations.mysql.gz',
        ) ,
        'form_id' => 'configurations.mysql.gz',
      ),
    );



 $install_state['mods'] = array('Importando Data' => 1);

  $batch = array(
    'title' => t('Importando Data'),
  );
  //copying implementation from install.core.inc since module_enable does not seem to play well with Batch API
  $files = system_rebuild_module_data();
  foreach ($install_state['mods'] as $key => $module) {
    $batch['operations'][] = array('_install_data_batch', array($data));
  }
  return $batch;
}



function _install_data_batch($data){

  variable_set('profile_andes_site_name', variable_get('site_name'));
  variable_set('profile_andes_site_mail', variable_get('site_mail'));
  variable_set('profile_andes_site_default_country', variable_get('site_default_country'));
  variable_set('profile_andes_date_default_timezone', variable_get('date_default_timezone'));
  variable_set('profile_andes_site_default_user_name', variable_get('site_default_user_name'));

  variable_set('profile_andes_site_default_user_mail', variable_get('site_default_user_mail'));
  variable_set('profile_andes_site_default_user_pass', variable_get('site_default_user_pass'));

  backup_migrate_include('crud', 'locations');
  backup_migrate_perform_restore('manual', 'configurations.mysql.gz', $data);
  drupal_set_message(t('Congratulations your site is already'), 'status', TRUE);
  
  variable_set('site_name', variable_get('profile_andes_site_name'));
  variable_set('site_mail', variable_get('profile_andes_site_mail'));
  variable_set('site_default_country', variable_get('profile_andes_site_default_country'));
  variable_set('date_default_timezone', variable_get('profile_andes_date_default_timezone'));

  require './includes/password.inc';
  $user = user_load(1);
  $user->name = variable_get('profile_andes_site_default_user_name');
  $user->mail = variable_get('profile_andes_site_default_user_mail');
  $user->pass = user_hash_password(variable_get('profile_andes_site_default_user_pass'));
  $user->created = time(); 
  user_save($user);
  
   // Reset auto increment.
  db_query("ALTER TABLE users AUTO_INCREMENT = 1"); 
  // Users table doesn't use AI, reset uid sequence.
  db_query("UPDATE sequences SET value = 1");
  db_query("ALTER TABLE sequences AUTO_INCREMENT = 1");
}


function andes_install_finished(&$install_state) {
  drupal_set_title(st('@drupal installation complete', array('@drupal' => drupal_install_profile_distribution_name())), PASS_THROUGH);
  $messages = drupal_set_message();

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());
  variable_set('install_task', 'done');

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the install profile are registered correctly.
  drupal_flush_all_caches();
  drupal_goto('<front>');
}




