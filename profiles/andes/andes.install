<?php

include_once 'api/andes.taxonomy.inc';
include_once 'api/andes.noticias.inc';
 /**
 * Implements hook_form_FORM_ID_alter().
 */
function andes_form_install_configure_form_alter(&$form, $form_state) {
  $form['server_settings']['site_default_country']['#default_value'] = 'CO';
  drupal_add_js('jQuery(document).ready(function () { jQuery("#edit-date-default-timezone").val("America/Bogota"); });', 'inline');
}
/**
 * Implements hook_install().
 */
function andes_install() {
 // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  // Enable Theme Default.
  variable_set('theme_default','andes');

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some andes blocks.
  $default_theme = variable_get('theme_default', 'andes');
  $admin_theme = 'adminimal';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'language',
      'delta' => 'lang_dropdown',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'navigation',
      'pages' => '',
      'cache' => -1,
    ),    
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');


  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $help = st('Enter a comma-separated list of words to describe your content.');
  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);


  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );

  menu_link_save($item);
  // Update the menu router information.
  menu_rebuild();

  // // Create Menu (Mega-Menu) 
  $menu_mega = array(
    'menu_name' => 'menu-mega-menu',  
    'title' => 'Mega Menu', 
    'description' => 'Main menu (Mega-Menu)');

  menu_save($menu_mega);

  // Create Menu (Top-Soy-Menu) 
  $menu_top_soy = array(
    'menu_name' => 'menu-top-soy',  
    'title' => 'Mega top soy', 
    'description' => 'Mega top soy (Mega-top-soy)');

  menu_save($menu_top_soy);

  // Create Menu (Menu Principal) 
  $menu_main = array(
    'menu_name' => 'menu-enlaces-de-interes',  
    'title' => 'Enlaces de interes', 
    'description' => 'Enlaces de interes');

  menu_save($menu_main);

  // Create Menu (Menu Principal) 
  $menu_main = array(
    'menu_name' => 'main-menu',  
    'title' => 'Menu principal', 
    'description' => 'Menu principal(Menu-principal)');

  menu_save($menu_main);


  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'adminimal')
    ->execute();

  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->condition('name', 'bartik')
    ->execute();

  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'bootstrap')
    ->execute();

  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'andes')
    ->execute();    

   variable_set('admin_theme', 'adminimal');
   variable_set('node_admin_theme', '1');   

   // Enabled  Task Pages Manager 
   variable_set('page_manager_node_view_disabled', FALSE);  

   // Import Menu ("menu-mega-menu"). 
    module_load_include('inc', 'menu_import', 'includes/import');
    
    $options = array();
   
   // Import Menu ("menu-mega-menu"). 
    $menu = menu_import_parse_menu_from_file(getcwd().'/profiles/andes/menus/menu-mega-menu-export.txt', 'menu-mega-menu',$options);
    menu_import_save_menu($menu, $options);

   // Import Menu ("menu-top-soy"). 
    $menu = menu_import_parse_menu_from_file(getcwd().'/profiles/andes/menus/menu-menu-top-soy-export.txt', 'menu-top-soy',$options);
    menu_import_save_menu($menu, $options);

   // Import Menu ("main-menu"). 
    $menu = menu_import_parse_menu_from_file(getcwd().'/profiles/andes/menus/main-menu-export.txt', 'main-menu',$options);
    menu_import_save_menu($menu, $options);

   // Import Menu ("menu-enlaces-de-interes"). 
    $menu = menu_import_parse_menu_from_file(getcwd().'/profiles/andes/menus/menu-enlaces-de-interes-export.txt', 'menu-enlaces-de-interes',$options);
    menu_import_save_menu($menu, $options);


    // Set Enabled Preflix languages en
    db_update('languages')
      ->fields(array(
        'name' => 'English',
        'native' => 'English',
        'domain' => '',
        'prefix' => 'en',
        'direction' => '0',
      ))
      ->condition('language',  'en')
      ->execute();

    // Multilanguage
    // Set setting language_negotiation_set // Es - Multilanguage 
    require_once DRUPAL_ROOT . '/includes/language.inc';
    require_once DRUPAL_ROOT . '/includes/locale.inc';

    $negotiation = array (
      'language-default' => 
      array (
        'callbacks' => 
        array (
          'language' => 'language_from_default',
        ),
        'weight' => '10',
        'name' => 'Predeterminado',
        'description' => 'Usar el idioma predeterminado del sitio (Español).',
      ),
      'locale-url' => 
      array (
        'types' => 
        array (
          0 => 'language_content',
          1 => 'language',
          2 => 'language_url',
        ),
        'callbacks' => 
        array (
          'language' => 'locale_language_from_url',
          'switcher' => 'locale_language_switcher_url',
          'url_rewrite' => 'locale_language_url_rewrite_url',
        ),
        'file' => 'includes/locale.inc',
        'weight' => '-8',
        'name' => 'URL',
        'description' => 'Determinar el idioma a partir de la URL (prefijo de ruta o dominio).',
        'config' => 'admin/config/regional/language/configure/url',
      ),
    );
   language_negotiation_set('language', $negotiation);

    $providers_weight = array (
      0 => 
      array (
        'locale-url' => '-8',
        'locale-session' => '-6',
        'locale-user' => '-4',
        'locale-browser' => '-2',
        'language-default' => '10',
      ),
    );

  variable_set("locale_language_providers_weight_language", $providers_weight);  
  //  Set bundle "noticias" -> Entity Node
  variable_set('language_content_type_' . 'noticias', 4); 
  variable_set('language_content_type_' . 'materiales_de_estudio', 4); 
}

function andes_profile_details() {
  $details['language'] = "es";
  return $details;
}



function andes_install_tasks($install_state) {

  $flag = TRUE;
  $tasks = array();

  $tasks['install_tax'] = array(
    'display_name' => st('Importacion de Taxonomias'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => $flag ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'function' => '_install_taxonomy',
  );

  $tasks['install_style_image'] = array(
    'display_name' => st('Importacion de Estilos de Imagen'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => $flag ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'function' => '_install_style_image',
  );  

  $tasks['install_mod'] = array(
    'display_name' => st('Importacion de contenido'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => $flag ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP, 
    'function' => '_install_mods',
  );

  $tasks['install_views'] = array(
    'display_name' => st('Importacion de vistas'),
    'display' => TRUE,
    'type' => 'batch',
    'run' => $flag ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP, 
    'function' => '_install_views',
  );

  return $tasks;
}

function _install_mods() {

  module_load_include('inc', 'phpexcel');
  
  $batch = array(
    'title' => t('Importando contenido'),
  );

  // Create beans types.
  module_enable(array('beans_types'), TRUE);
  // Create contents types.
  module_enable(array('tc_noticias'), TRUE);
  module_enable(array('tc_eventos'), TRUE);
  module_enable(array('tc_layouts'), TRUE);
  module_enable(array('tc_materiales_de_estudio'), TRUE);
  module_enable(array('tc_publicaciones'), TRUE);
  module_enable(array('field_condicion_list'), TRUE);

  //copying implementation from install.core.inc since module_enable does not seem to play well with Batch API
  $files = system_rebuild_module_data();

  $file_path_noticias = getcwd() . '/profiles/andes/modules/custom/udla_load_events/format/noticias.xls';
  $noticias = phpexcel_import($file_path_noticias);
 
  foreach ($noticias[false] as $key => $value) {
    $batch['operations'][] = array('_import_noticias_batch', array($value));
  }

  $file_path_material_estudio = getcwd() . '/profiles/andes/modules/custom/udla_load_events/format/materiales_de_estudio.xls';
  $material_estudio = phpexcel_import($file_path_material_estudio);
 
  foreach ($material_estudio[false] as $key => $value) {
    $batch['operations'][] = array('_import_material_estudio_batch', array($value));
  }


  return $batch;
}


function _install_views() {
  $install_state['mods'] = array('views' => 1);
  
  $batch = array(
    'title' => t('Importando vistas'),
  );
  //copying implementation from install.core.inc since module_enable does not seem to play well with Batch API
  $files = system_rebuild_module_data();
  foreach ($install_state['mods'] as $key => $module) {
    $batch['operations'][] = array('_install_views_batch', array($module));
  }
  return $batch;
}

function _install_views_batch(){
  module_enable(array('udla_load_views'), TRUE);
}


function _install_taxonomy() {
  // Create taxonomy machine_name.
  taxonomy_vocabulary_save((object) array('name' => 'Noticias','machine_name' => 'categorias_noticia'));
  taxonomy_vocabulary_save((object) array('name' => 'Área tematica','machine_name' => 'area_tematica'));  
  taxonomy_vocabulary_save((object) array('name' => 'Editorial','machine_name' => 'editorial'));
  taxonomy_vocabulary_save((object) array('name' => 'Eventos','machine_name' => 'eventos'));
  taxonomy_vocabulary_save((object) array('name' => 'Footer Top','machine_name' => 'footer_top'));
  taxonomy_vocabulary_save((object) array('name' => 'Formato','machine_name' => 'formato'));
  taxonomy_vocabulary_save((object) array('name' => 'Lateral Items','machine_name' => 'lateral_items'));
  taxonomy_vocabulary_save((object) array('name' => 'Redes Sociales','machine_name' => 'redes_sociales'));
  taxonomy_vocabulary_save((object) array('name' => 'Tipo de layout','machine_name' => 'tipo_layout'));

  $install_state['mods'] = array('Taxonomy' => 1);
  
  $batch = array(
    'title' => t('Importando Taxonomias'),
  );
  //copying implementation from install.core.inc since module_enable does not seem to play well with Batch API
  $files = system_rebuild_module_data();
  foreach ($install_state['mods'] as $key => $module) {
    $batch['operations'][] = array('_install_taxonomy_batch', array($module));
  }
  return $batch;
}

function _install_taxonomy_batch(){
  andes_import_taxonomy();
}

function _install_style_image(){
  
  $install_state['mods'] = array('Style Image' => 1);
  
  $batch = array(
    'title' => t('Importando Estilos de Imagen'),
  );
  //copying implementation from install.core.inc since module_enable does not seem to play well with Batch API
  $files = system_rebuild_module_data();
  foreach ($install_state['mods'] as $key => $module) {
    $batch['operations'][] = array('_install_style_image_batch', array($module));
  }
  return $batch;  
}

function _install_style_image_batch(){
  module_enable(array('estilos'), TRUE);
}
